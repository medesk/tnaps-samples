This is a basic sample for TNAPS that demonstrates transparent access to the components through HTTP. It consits of two components (Binary Calculator (Converter) and Currency Monitor) and a single application that uses TNAPS Host Provider built-in component for HTTP access.

	1. Requirements
	2. Compilation
	3. Deployment
	4. Sample Architecture

1. Requirements
===============================

* Installed TNAPS and TNAPS SDK. 
  For more information about TNAPS requirements and installation, 
  see README in TNAPS and TNAPS SDK installation packages.
  
* TNAPS_HOME environment variable pointing to TNAPS directory
  i.e. /opt/tnaps

* (for Linux/MAC) MONO environment variable pointing to Mono directory
  i.e. /opt/mono

* Installed Microsoft .NET Framework SDK (Windows only).



2. Compilation
===============================

WINDOWS

	1. Open Windows Command Line (cmd.exe) as Administrator;
	2. Change dir to the directory with demo1 sample
		cd D:\tnaps-samples\sample_1
	3. Execute make_sample.cmd
		make_sample.cmd

LINUX/MAC OSX
	
	1. Open console;
	2. Change dir to the directory with sample_1
		cd ~/tnaps-samples/sample_1
	3. Execute make_sample.sh
		./make_sample.sh

	IMPORTANT!
	make_sample.sh should be executed directly from sample_1 dir
	Do not execute it outside sample_1 folder as it uses relative paths 
	to build packages! 

This workflow produces 'sample_1.tnpak' file that represents TNAPS Application Package.

NOTE: You can define a necessary environment variables once at machine level.

3. Deployment
===============================

	1. Navigate to TNAPS Management Center using browser (usually http://localhost:9095/tnaps/console).
	2. Open TNAPS Library panel.
	2. Click [Install] button
	3. Select sample_1.tnpak file and press Install. Your sample application will be installed into TNAPS Library.
	4. Now create Instance from that App. To do so open Apps panel and click [Add instance] button.
	5. Select installed App and version, enter Instance name and click Create. 
	6. In the created instance panel click Start button to launch app.
	7. Navigate to http://localhost:8082/items/index.html using your browser to load sample client.
 
4. Sample Architecture
===============================

This sample demonstrates some basics of TNAPS usage. It is a fully featured
web-application with client part written in HTML+JavaScript and embedded into
server package. 

Sample contains two custom components and one standart components that
comes with TNAPS - HostProvider. HostProvider is a root component in this App.
It recieves HTTP requests at specified port and forwards them to
the actual component.

For example request like /components/calc/int_to_bin.json?value=0 will be
forwarded to binary converter (calculator) component. As 'calc' is the
alias under which HostProvider is linked to this component. 

Here is the basic architecture outline:

                           /-->currency <----> Yahoo! Finanace API
client <-> hostprovider<--x	        
                |          \-->calculator
                |
		web client files

Complitation of the sample package is a bit confusing right now as you need 
to set a lot of configuration parameters for making package. This would become
easier when TNAPS Studio will arrive and all components and apps can be packaged
right from the TNAPS Management Center.

However all of the compilation logic is quite simple:

1. We build *.dll files with component logic.
2. We create TNAPS Packages for this components. 
3. We create TNAPS Application Package and specify component dependencies.

   
